import pygame
import numpy as np

# Initialize Pygame
pygame.init()

# Constants
CELL_SIZE = 10
GRID_SIZE = 50
WIDTH, HEIGHT = CELL_SIZE * GRID_SIZE, CELL_SIZE * GRID_SIZE
WHITE, BLACK = (255, 255, 255), (0, 0, 0)

# Create the grid
grid = np.random.choice([0, 1], size=(GRID_SIZE, GRID_SIZE), p=[0.8, 0.2])

# Set up the display
window = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Conway's Game of Life")

# Main game loop
while True:
    window.fill(WHITE)

    # Update the grid based on Conway's rules
    new_grid = np.copy(grid)
    for x in range(1, GRID_SIZE - 1):
        for y in range(1, GRID_SIZE - 1):
            neighbors = grid[x - 1:x + 2, y - 1:y + 2]
            alive_neighbors = np.sum(neighbors) - grid[x, y]
            if grid[x, y] == 1 and (alive_neighbors < 2 or alive_neighbors > 3):
                new_grid[x, y] = 0
            elif grid[x, y] == 0 and alive_neighbors == 3:
                new_grid[x, y] = 1

    grid = np.copy(new_grid)

    # Draw the grid
    for x in range(GRID_SIZE):
        for y in range(GRID_SIZE):
            if grid[x, y] == 1:
                pygame.draw.rect(window, BLACK, (x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE))

    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()

    pygame.display.flip()
    pygame.time.delay(100)  # Add a delay to control the animation speed
